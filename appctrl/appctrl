#!/usr/bin/env ruby
require 'foreman_api'
require 'logger'
require 'optparse'
require 'pry'
require 'rye'

def load_options
  options = {}

  OptionParser.new do |opts|
    opts.banner = "Usage: appctrl [options]"

    opts.on('-h', '--hostgroup [hostgroup]', 'Hostgroup to target') do |hostgroup|
      options[:hostgroup] = hostgroup
    end

    opts.on('-e', '--environment [environment]', 'Environment to target') do |environment|
      options[:environment] = environment
    end
  end.parse!

  raise OptionParser::MissingArgument, '--environment' if options[:environment].nil?

  return options
end

fm_user = '***REMOVED***'
fm_pass = '***REMOVED***'
fm_url = 'http://foreman.***REMOVED***'
fm_params = { "per_page" => 10000 }

# Set up Logger
logger = Logger.new(STDOUT)
logger.level = Logger::DEBUG


begin
  @options = load_options

  hosts = ForemanApi::Resources::Host.new({
    :logger => logger,
    :base_url => fm_url,
    :username => fm_user,
    :password => fm_pass,
  })

  envs = ForemanApi::Resources::Environment.new({
    :logger => logger,
    :base_url => fm_url,
    :username => fm_user,
    :password => fm_pass,
  })

  hostgroups = ForemanApi::Resources::Hostgroup.new({
    :logger => logger,
    :base_url => fm_url,
    :username => fm_user,
    :password => fm_pass,
  })

  hosts_list = hosts.index(fm_params)[0]["results"]
  env_list = envs.index(fm_params)[0]["results"]
  hg_list = hostgroups.index(fm_params)[0]["results"]

  # Is environment valid?
  if env_list.select { |env| env["name"] == @options[:environment]}.length != 1
    puts "Invalid environment."
    exit 1
  end
 
  # Is hostgroup valid?
  if !@options[:hostgroup].nil?
    if hg_list.select { |hg| hg["title"] == @options[:hostgroup]}.length != 1
      puts "Invalid hostgroup."
      exit 1
    end
  end
  
  # Remove hosts not in environmet
  hosts_list = hosts_list.select { |host| host['name'].include? @options[:environment] }

  # Remove hosts not in hostgroup
  if !@options[:hostgroup].nil?
    hosts_list = hosts_list.select { |host| host['hostgroup_name'] == @options[:hostgroup] }
  end

  # Setup list of hosts for rye
  rset = Rye::Set.new
  hosts_list.each { |host| rset.add_boxes host }
  
  
  binding.pry 
rescue OptionParser::MissingArgument => e
  puts e.message
end
